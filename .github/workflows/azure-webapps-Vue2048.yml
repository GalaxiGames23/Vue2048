on:
  schedule:
    - cron: "0 8 * * 1"
  push:
    paths-ignore:
      - 'docs/**'
    branches: [ "master" ]
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, closed]
  workflow_dispatch:
    inputs:
        run_static_analysis:
          description: 'Exécuter les analyses statiques ?'
          required: true
          default: false
        run_tests:
          description: 'Exécuter les tests ?'
          required: true
          default: false
permissions:
  contents: read
  id-token: write

env:
  AZURE_WEBAPP_NAME: stapp-vue2048-prod   
  AZURE_WEBAPP_PACKAGE_PATH: './dist/'      
  NODE_VERSION: '18.x'               
  #TEMP_ENV_GROUP: rg-vue2048-prod
  #TEMP_ENV: test

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2
      with:
        version: latest
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: pnpm install
      run: |
        pnpm install
        pnpm build 
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      if: github.ref == 'refs/heads/main'
      with:
        name: node-app
        path: ./dist
        retention-days: 7
        
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      if: github.ref != 'refs/heads/main'
      with:
        name: node-app
        path: ./dist
        retention-days: 1
        
    - name: Typechecking and linting
      if: github.event_name == 'pull_request' || github.event.inputs.run_static_analysis
      run : |
          echo "pnpm type-check"
          echo "pnpm eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore"
    
    - name : Pnpm test 
      if: github.event_name == 'pull_request' || github.event.inputs.run_tests
      run: |
          echo "pnpm vitest"

  deploy-infra:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Pulumi'
      url: "${{ 'https://ashy-smoke-0c9b43a03.2.azurestaticapps.net/' }}"

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app
        
    - uses: pulumi/actions@v4
      with:
        command: preview
        stack-name: ei8it213/mltlmc-vue-2048
      env: 
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
    

 
          
  # Nous avons essayé de faire la partie aller plus loin mais sans succès
  #deploy_temp:
  #  runs-on: ubuntu-latest
  #  if: |
  #    github.event_name == 'pull_request' && (
  #      github.event.action == 'labeled' || 
  #      github.event.action == 'unlabeled' || 
  #      github.event.action == 'opened' || 
  #      github.event.action == 'synchronize' || 
  #      github.event.action == 'closed'
  #    )
  #  steps:
  #  - name: Checkout repository
  #    uses: actions/checkout@v2
  #    
  #  - name: Login to Azure
  #    uses: azure/login@v1
  #    with:
  #      creds: ${{ secrets.AZURE_CREDENTIALS }}

  #  - name: Deploy to temporary environment
  #    run: |
  #      if [[ "${{ github.event.label.name }}" == "label" || "${{ github.event.action }}" != "labeled" ]]; then
  #        az webapp create --name TEMP_ENV --resource-group TEMP_ENV_GROUP --plan https://black-bay-0bfdc7403.3.azurestaticapps.net/ --runtime "NODE|18.x" --deployment-source-url ${{ github.event.pull_request.head.repo.html_url }} --deployment-source-branch ${{ github.event.pull_request.head.ref }}
  #        TEMP_ENV_URL=$(az webapp show --name TEMP_ENV --resource-group TEMP_ENV_GROUP --query 'defaultHostName' --output tsv)
  #        PR_COMMENT="Temporary environment deployed: https://${TEMP_ENV_URL}"
  #        PR_COMMENT_URL="${{ github.event.pull_request.comments_url }}"
  #        curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" --data "{\"body\": \"$PR_COMMENT\"}" -X POST "$PR_COMMENT_URL"
  #      fi
  #      if [ "${{ github.event.action }}" == "closed" ]; then
  #        az webapp delete --name TEMP_ENV --resource-group TEMP_ENV_GROUP
  #      fi
  #      az logout
