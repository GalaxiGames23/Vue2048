on:
  schedule:
    - cron: "0 8 * * 1"
  push:
    paths-ignore:
      - 'docs/**'
    branches: [ "master" ]
  pull_request:
    types: [opened, synchronize, labeled, unlabeled, closed]
  workflow_dispatch:
    inputs:
        run_static_analysis:
          description: 'Exécuter les analyses statiques ?'
          required: true
          default: false
        run_tests:
          description: 'Exécuter les tests ?'
          required: true
          default: false

env:
  AZURE_WEBAPP_NAME: stapp-vue2048-prod   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: './dist/'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '18.x'                # set this to the node version to use
  TEMP_ENV_GROUP: rg-vue2048-prod
  TEMP_ENV: test
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2
      with:
        version: latest
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'

    - name: pnpm install
      run: |
        pnpm install
        pnpm build 
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      if: github.ref == 'refs/heads/main'
      with:
        name: node-app
        path: ./dist
        retention-days: 7
        
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      if: github.ref != 'refs/heads/main'
      with:
        name: node-app
        path: ./dist
        retention-days: 1
        
    - name: Typechecking and linting
      if: github.event_name == 'pull_request' || github.event.inputs.run_static_analysis
      run : |
          echo "pnpm type-check"
          echo "pnpm eslint . --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix --ignore-path .gitignore"
    
    - name : Pnpm test 
      if: github.event_name == 'pull_request' || github.event.inputs.run_tests
      run: |
          echo "pnpm vitest"

  deploy_prod:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Prod'
      url: "${{ 'https://ashy-smoke-0c9b43a03.2.azurestaticapps.net/' }}"

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      uses: Azure/static-web-apps-deploy@v1
      with:
        skip_app_build: true
        action: upload
        azure_static_web_apps_api_token: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        app_artifact_location: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} 
        
  deploy_qa:
      runs-on: ubuntu-latest
      needs: build
      environment:
        name: 'QA'
        url: "${{ 'https://black-bay-0bfdc7403.3.azurestaticapps.net' }}"

      steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: 'Deploy to Azure WebApp'
        uses: Azure/static-web-apps-deploy@v1
        with:
          skip_app_build: true
          action: upload
          azure_static_web_apps_api_token: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          app_artifact_location: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy_temp:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && (
        github.event.action == 'labeled' || 
        github.event.action == 'unlabeled' || 
        github.event.action == 'opened' || 
        github.event.action == 'synchronize' || 
        github.event.action == 'closed'
      )
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: mlam003@outlook.fr
        tenant-id: 2f905265-c107-4ce0-87c1-340f43db77d1
        subscription-id: 29a7bdaa-7c1d-4f91-b477-b9f57f19b2a3

    - name: Deploy to temporary environment
      run: |
        if [[ "${{ github.event.label.name }}" == "label" || "${{ github.event.action }}" != "labeled" ]]; then
          az webapp create --name TEMP_ENV --resource-group TEMP_ENV_GROUP --plan https://black-bay-0bfdc7403.3.azurestaticapps.net/ --runtime "NODE|18.x" --deployment-source-url ${{ github.event.pull_request.head.repo.html_url }} --deployment-source-branch ${{ github.event.pull_request.head.ref }}
          TEMP_ENV_URL=$(az webapp show --name TEMP_ENV --resource-group TEMP_ENV_GROUP --query 'defaultHostName' --output tsv)

          PR_COMMENT="Temporary environment deployed: https://${TEMP_ENV_URL}"
          PR_COMMENT_URL="${{ github.event.pull_request.comments_url }}"
          curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" --data "{\"body\": \"$PR_COMMENT\"}" -X POST "$PR_COMMENT_URL"
        fi
        if [ "${{ github.event.action }}" == "closed" ]; then
          echo "Destroying temporary environment..."
          az webapp delete --name TEMP_ENV --resource-group TEMP_ENV_GROUP
        fi
        az logout
